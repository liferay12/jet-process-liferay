/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package io.jetprocess.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import io.jetprocess.model.FileMovement;
import io.jetprocess.model.FileMovementModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FileMovement service. Represents a row in the &quot;JET_PROCESS_FileMovement&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FileMovementModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FileMovementImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FileMovementImpl
 * @generated
 */
@JSON(strict = true)
public class FileMovementModelImpl
	extends BaseModelImpl<FileMovement> implements FileMovementModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a file movement model instance should use the <code>FileMovement</code> interface instead.
	 */
	public static final String TABLE_NAME = "JET_PROCESS_FileMovement";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"fmId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"receiverId", Types.BIGINT},
		{"senderId", Types.BIGINT}, {"fileId", Types.BIGINT},
		{"priority", Types.VARCHAR}, {"dueDate", Types.TIMESTAMP},
		{"remark", Types.VARCHAR}, {"readOn", Types.VARCHAR},
		{"receivedOn", Types.VARCHAR}, {"pullBackRemark", Types.VARCHAR},
		{"active_", Types.BOOLEAN}, {"movementType", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fmId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("receiverId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("senderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("priority", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("remark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("readOn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("receivedOn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pullBackRemark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("movementType", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table JET_PROCESS_FileMovement (uuid_ VARCHAR(75) null,fmId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,receiverId LONG,senderId LONG,fileId LONG,priority VARCHAR(75) null,dueDate DATE null,remark VARCHAR(75) null,readOn VARCHAR(75) null,receivedOn VARCHAR(75) null,pullBackRemark VARCHAR(500) null,active_ BOOLEAN,movementType LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table JET_PROCESS_FileMovement";

	public static final String ORDER_BY_JPQL =
		" ORDER BY fileMovement.fmId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY JET_PROCESS_FileMovement.fmId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FILEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FMID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FileMovementModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fmId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFmId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fmId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FileMovement.class;
	}

	@Override
	public String getModelClassName() {
		return FileMovement.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FileMovement, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FileMovement, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FileMovement, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FileMovement)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FileMovement, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FileMovement, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FileMovement)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FileMovement, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FileMovement, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<FileMovement, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FileMovement, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FileMovement, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<FileMovement, Object>>();
		Map<String, BiConsumer<FileMovement, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FileMovement, ?>>();

		attributeGetterFunctions.put("uuid", FileMovement::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<FileMovement, String>)FileMovement::setUuid);
		attributeGetterFunctions.put("fmId", FileMovement::getFmId);
		attributeSetterBiConsumers.put(
			"fmId", (BiConsumer<FileMovement, Long>)FileMovement::setFmId);
		attributeGetterFunctions.put("groupId", FileMovement::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FileMovement, Long>)FileMovement::setGroupId);
		attributeGetterFunctions.put("companyId", FileMovement::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FileMovement, Long>)FileMovement::setCompanyId);
		attributeGetterFunctions.put("userId", FileMovement::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<FileMovement, Long>)FileMovement::setUserId);
		attributeGetterFunctions.put("createDate", FileMovement::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FileMovement, Date>)FileMovement::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FileMovement::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FileMovement, Date>)FileMovement::setModifiedDate);
		attributeGetterFunctions.put("receiverId", FileMovement::getReceiverId);
		attributeSetterBiConsumers.put(
			"receiverId",
			(BiConsumer<FileMovement, Long>)FileMovement::setReceiverId);
		attributeGetterFunctions.put("senderId", FileMovement::getSenderId);
		attributeSetterBiConsumers.put(
			"senderId",
			(BiConsumer<FileMovement, Long>)FileMovement::setSenderId);
		attributeGetterFunctions.put("fileId", FileMovement::getFileId);
		attributeSetterBiConsumers.put(
			"fileId", (BiConsumer<FileMovement, Long>)FileMovement::setFileId);
		attributeGetterFunctions.put("priority", FileMovement::getPriority);
		attributeSetterBiConsumers.put(
			"priority",
			(BiConsumer<FileMovement, String>)FileMovement::setPriority);
		attributeGetterFunctions.put("dueDate", FileMovement::getDueDate);
		attributeSetterBiConsumers.put(
			"dueDate",
			(BiConsumer<FileMovement, Date>)FileMovement::setDueDate);
		attributeGetterFunctions.put("remark", FileMovement::getRemark);
		attributeSetterBiConsumers.put(
			"remark",
			(BiConsumer<FileMovement, String>)FileMovement::setRemark);
		attributeGetterFunctions.put("readOn", FileMovement::getReadOn);
		attributeSetterBiConsumers.put(
			"readOn",
			(BiConsumer<FileMovement, String>)FileMovement::setReadOn);
		attributeGetterFunctions.put("receivedOn", FileMovement::getReceivedOn);
		attributeSetterBiConsumers.put(
			"receivedOn",
			(BiConsumer<FileMovement, String>)FileMovement::setReceivedOn);
		attributeGetterFunctions.put(
			"pullBackRemark", FileMovement::getPullBackRemark);
		attributeSetterBiConsumers.put(
			"pullBackRemark",
			(BiConsumer<FileMovement, String>)FileMovement::setPullBackRemark);
		attributeGetterFunctions.put("active", FileMovement::getActive);
		attributeSetterBiConsumers.put(
			"active",
			(BiConsumer<FileMovement, Boolean>)FileMovement::setActive);
		attributeGetterFunctions.put(
			"movementType", FileMovement::getMovementType);
		attributeSetterBiConsumers.put(
			"movementType",
			(BiConsumer<FileMovement, Long>)FileMovement::setMovementType);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getFmId() {
		return _fmId;
	}

	@Override
	public void setFmId(long fmId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fmId = fmId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getReceiverId() {
		return _receiverId;
	}

	@Override
	public void setReceiverId(long receiverId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_receiverId = receiverId;
	}

	@JSON
	@Override
	public long getSenderId() {
		return _senderId;
	}

	@Override
	public void setSenderId(long senderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_senderId = senderId;
	}

	@JSON
	@Override
	public long getFileId() {
		return _fileId;
	}

	@Override
	public void setFileId(long fileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileId = fileId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFileId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("fileId"));
	}

	@JSON
	@Override
	public String getPriority() {
		if (_priority == null) {
			return "";
		}
		else {
			return _priority;
		}
	}

	@Override
	public void setPriority(String priority) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_priority = priority;
	}

	@JSON
	@Override
	public Date getDueDate() {
		return _dueDate;
	}

	@Override
	public void setDueDate(Date dueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dueDate = dueDate;
	}

	@JSON
	@Override
	public String getRemark() {
		if (_remark == null) {
			return "";
		}
		else {
			return _remark;
		}
	}

	@Override
	public void setRemark(String remark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remark = remark;
	}

	@JSON
	@Override
	public String getReadOn() {
		if (_readOn == null) {
			return "";
		}
		else {
			return _readOn;
		}
	}

	@Override
	public void setReadOn(String readOn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_readOn = readOn;
	}

	@JSON
	@Override
	public String getReceivedOn() {
		if (_receivedOn == null) {
			return "";
		}
		else {
			return _receivedOn;
		}
	}

	@Override
	public void setReceivedOn(String receivedOn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_receivedOn = receivedOn;
	}

	@JSON
	@Override
	public String getPullBackRemark() {
		if (_pullBackRemark == null) {
			return "";
		}
		else {
			return _pullBackRemark;
		}
	}

	@Override
	public void setPullBackRemark(String pullBackRemark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pullBackRemark = pullBackRemark;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_active = active;
	}

	@JSON
	@Override
	public long getMovementType() {
		return _movementType;
	}

	@Override
	public void setMovementType(long movementType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_movementType = movementType;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(FileMovement.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FileMovement.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FileMovement toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FileMovement>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FileMovementImpl fileMovementImpl = new FileMovementImpl();

		fileMovementImpl.setUuid(getUuid());
		fileMovementImpl.setFmId(getFmId());
		fileMovementImpl.setGroupId(getGroupId());
		fileMovementImpl.setCompanyId(getCompanyId());
		fileMovementImpl.setUserId(getUserId());
		fileMovementImpl.setCreateDate(getCreateDate());
		fileMovementImpl.setModifiedDate(getModifiedDate());
		fileMovementImpl.setReceiverId(getReceiverId());
		fileMovementImpl.setSenderId(getSenderId());
		fileMovementImpl.setFileId(getFileId());
		fileMovementImpl.setPriority(getPriority());
		fileMovementImpl.setDueDate(getDueDate());
		fileMovementImpl.setRemark(getRemark());
		fileMovementImpl.setReadOn(getReadOn());
		fileMovementImpl.setReceivedOn(getReceivedOn());
		fileMovementImpl.setPullBackRemark(getPullBackRemark());
		fileMovementImpl.setActive(isActive());
		fileMovementImpl.setMovementType(getMovementType());

		fileMovementImpl.resetOriginalValues();

		return fileMovementImpl;
	}

	@Override
	public FileMovement cloneWithOriginalValues() {
		FileMovementImpl fileMovementImpl = new FileMovementImpl();

		fileMovementImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		fileMovementImpl.setFmId(this.<Long>getColumnOriginalValue("fmId"));
		fileMovementImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		fileMovementImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		fileMovementImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		fileMovementImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		fileMovementImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		fileMovementImpl.setReceiverId(
			this.<Long>getColumnOriginalValue("receiverId"));
		fileMovementImpl.setSenderId(
			this.<Long>getColumnOriginalValue("senderId"));
		fileMovementImpl.setFileId(this.<Long>getColumnOriginalValue("fileId"));
		fileMovementImpl.setPriority(
			this.<String>getColumnOriginalValue("priority"));
		fileMovementImpl.setDueDate(
			this.<Date>getColumnOriginalValue("dueDate"));
		fileMovementImpl.setRemark(
			this.<String>getColumnOriginalValue("remark"));
		fileMovementImpl.setReadOn(
			this.<String>getColumnOriginalValue("readOn"));
		fileMovementImpl.setReceivedOn(
			this.<String>getColumnOriginalValue("receivedOn"));
		fileMovementImpl.setPullBackRemark(
			this.<String>getColumnOriginalValue("pullBackRemark"));
		fileMovementImpl.setActive(
			this.<Boolean>getColumnOriginalValue("active_"));
		fileMovementImpl.setMovementType(
			this.<Long>getColumnOriginalValue("movementType"));

		return fileMovementImpl;
	}

	@Override
	public int compareTo(FileMovement fileMovement) {
		long primaryKey = fileMovement.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FileMovement)) {
			return false;
		}

		FileMovement fileMovement = (FileMovement)object;

		long primaryKey = fileMovement.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FileMovement> toCacheModel() {
		FileMovementCacheModel fileMovementCacheModel =
			new FileMovementCacheModel();

		fileMovementCacheModel.uuid = getUuid();

		String uuid = fileMovementCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			fileMovementCacheModel.uuid = null;
		}

		fileMovementCacheModel.fmId = getFmId();

		fileMovementCacheModel.groupId = getGroupId();

		fileMovementCacheModel.companyId = getCompanyId();

		fileMovementCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			fileMovementCacheModel.createDate = createDate.getTime();
		}
		else {
			fileMovementCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			fileMovementCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			fileMovementCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		fileMovementCacheModel.receiverId = getReceiverId();

		fileMovementCacheModel.senderId = getSenderId();

		fileMovementCacheModel.fileId = getFileId();

		fileMovementCacheModel.priority = getPriority();

		String priority = fileMovementCacheModel.priority;

		if ((priority != null) && (priority.length() == 0)) {
			fileMovementCacheModel.priority = null;
		}

		Date dueDate = getDueDate();

		if (dueDate != null) {
			fileMovementCacheModel.dueDate = dueDate.getTime();
		}
		else {
			fileMovementCacheModel.dueDate = Long.MIN_VALUE;
		}

		fileMovementCacheModel.remark = getRemark();

		String remark = fileMovementCacheModel.remark;

		if ((remark != null) && (remark.length() == 0)) {
			fileMovementCacheModel.remark = null;
		}

		fileMovementCacheModel.readOn = getReadOn();

		String readOn = fileMovementCacheModel.readOn;

		if ((readOn != null) && (readOn.length() == 0)) {
			fileMovementCacheModel.readOn = null;
		}

		fileMovementCacheModel.receivedOn = getReceivedOn();

		String receivedOn = fileMovementCacheModel.receivedOn;

		if ((receivedOn != null) && (receivedOn.length() == 0)) {
			fileMovementCacheModel.receivedOn = null;
		}

		fileMovementCacheModel.pullBackRemark = getPullBackRemark();

		String pullBackRemark = fileMovementCacheModel.pullBackRemark;

		if ((pullBackRemark != null) && (pullBackRemark.length() == 0)) {
			fileMovementCacheModel.pullBackRemark = null;
		}

		fileMovementCacheModel.active = isActive();

		fileMovementCacheModel.movementType = getMovementType();

		return fileMovementCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FileMovement, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FileMovement, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FileMovement, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FileMovement)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<FileMovement, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<FileMovement, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FileMovement, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((FileMovement)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FileMovement>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FileMovement.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _fmId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _receiverId;
	private long _senderId;
	private long _fileId;
	private String _priority;
	private Date _dueDate;
	private String _remark;
	private String _readOn;
	private String _receivedOn;
	private String _pullBackRemark;
	private boolean _active;
	private long _movementType;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FileMovement, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FileMovement)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("fmId", _fmId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("receiverId", _receiverId);
		_columnOriginalValues.put("senderId", _senderId);
		_columnOriginalValues.put("fileId", _fileId);
		_columnOriginalValues.put("priority", _priority);
		_columnOriginalValues.put("dueDate", _dueDate);
		_columnOriginalValues.put("remark", _remark);
		_columnOriginalValues.put("readOn", _readOn);
		_columnOriginalValues.put("receivedOn", _receivedOn);
		_columnOriginalValues.put("pullBackRemark", _pullBackRemark);
		_columnOriginalValues.put("active_", _active);
		_columnOriginalValues.put("movementType", _movementType);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("active_", "active");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("fmId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("receiverId", 128L);

		columnBitmasks.put("senderId", 256L);

		columnBitmasks.put("fileId", 512L);

		columnBitmasks.put("priority", 1024L);

		columnBitmasks.put("dueDate", 2048L);

		columnBitmasks.put("remark", 4096L);

		columnBitmasks.put("readOn", 8192L);

		columnBitmasks.put("receivedOn", 16384L);

		columnBitmasks.put("pullBackRemark", 32768L);

		columnBitmasks.put("active_", 65536L);

		columnBitmasks.put("movementType", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FileMovement _escapedModel;

}