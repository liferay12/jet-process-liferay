/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package io.jetprocess.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import io.jetprocess.model.DocFile;
import io.jetprocess.model.DocFileModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DocFile service. Represents a row in the &quot;JET_PROCESS_DocFile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DocFileModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DocFileImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DocFileImpl
 * @generated
 */
@JSON(strict = true)
public class DocFileModelImpl
	extends BaseModelImpl<DocFile> implements DocFileModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a doc file model instance should use the <code>DocFile</code> interface instead.
	 */
	public static final String TABLE_NAME = "JET_PROCESS_DocFile";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"docFileId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"nature", Types.VARCHAR}, {"type_", Types.VARCHAR},
		{"basicHeadId", Types.BIGINT}, {"primaryHeadId", Types.BIGINT},
		{"secondaryHeadId", Types.BIGINT}, {"tertiaryHeadId", Types.BIGINT},
		{"fileCodeId", Types.BIGINT}, {"subject", Types.VARCHAR},
		{"fileNumber", Types.VARCHAR}, {"categoryId", Types.BIGINT},
		{"subCategoryId", Types.BIGINT}, {"remarks", Types.VARCHAR},
		{"reference", Types.VARCHAR}, {"year", Types.BIGINT},
		{"userPostId", Types.BIGINT}, {"currentlyWith", Types.BIGINT},
		{"currentState", Types.INTEGER}, {"dealingHeadSectionId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docFileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nature", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("basicHeadId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("primaryHeadId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("secondaryHeadId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tertiaryHeadId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileCodeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subCategoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reference", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("year", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userPostId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("currentlyWith", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("currentState", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dealingHeadSectionId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table JET_PROCESS_DocFile (uuid_ VARCHAR(75) null,docFileId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,nature VARCHAR(75) null,type_ VARCHAR(75) null,basicHeadId LONG,primaryHeadId LONG,secondaryHeadId LONG,tertiaryHeadId LONG,fileCodeId LONG,subject VARCHAR(75) null,fileNumber VARCHAR(75) null,categoryId LONG,subCategoryId LONG,remarks VARCHAR(500) null,reference VARCHAR(75) null,year LONG,userPostId LONG,currentlyWith LONG,currentState INTEGER,dealingHeadSectionId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table JET_PROCESS_DocFile";

	public static final String ORDER_BY_JPQL =
		" ORDER BY docFile.docFileId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY JET_PROCESS_DocFile.docFileId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DOCFILEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATURE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DocFileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _docFileId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDocFileId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _docFileId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DocFile.class;
	}

	@Override
	public String getModelClassName() {
		return DocFile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DocFile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DocFile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DocFile, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((DocFile)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DocFile, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DocFile, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DocFile)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DocFile, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DocFile, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DocFile, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DocFile, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DocFile, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DocFile, Object>>();
		Map<String, BiConsumer<DocFile, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DocFile, ?>>();

		attributeGetterFunctions.put("uuid", DocFile::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<DocFile, String>)DocFile::setUuid);
		attributeGetterFunctions.put("docFileId", DocFile::getDocFileId);
		attributeSetterBiConsumers.put(
			"docFileId", (BiConsumer<DocFile, Long>)DocFile::setDocFileId);
		attributeGetterFunctions.put("groupId", DocFile::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<DocFile, Long>)DocFile::setGroupId);
		attributeGetterFunctions.put("companyId", DocFile::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<DocFile, Long>)DocFile::setCompanyId);
		attributeGetterFunctions.put("userId", DocFile::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<DocFile, Long>)DocFile::setUserId);
		attributeGetterFunctions.put("userName", DocFile::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<DocFile, String>)DocFile::setUserName);
		attributeGetterFunctions.put("createDate", DocFile::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<DocFile, Date>)DocFile::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", DocFile::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<DocFile, Date>)DocFile::setModifiedDate);
		attributeGetterFunctions.put("nature", DocFile::getNature);
		attributeSetterBiConsumers.put(
			"nature", (BiConsumer<DocFile, String>)DocFile::setNature);
		attributeGetterFunctions.put("type", DocFile::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<DocFile, String>)DocFile::setType);
		attributeGetterFunctions.put("basicHeadId", DocFile::getBasicHeadId);
		attributeSetterBiConsumers.put(
			"basicHeadId", (BiConsumer<DocFile, Long>)DocFile::setBasicHeadId);
		attributeGetterFunctions.put(
			"primaryHeadId", DocFile::getPrimaryHeadId);
		attributeSetterBiConsumers.put(
			"primaryHeadId",
			(BiConsumer<DocFile, Long>)DocFile::setPrimaryHeadId);
		attributeGetterFunctions.put(
			"secondaryHeadId", DocFile::getSecondaryHeadId);
		attributeSetterBiConsumers.put(
			"secondaryHeadId",
			(BiConsumer<DocFile, Long>)DocFile::setSecondaryHeadId);
		attributeGetterFunctions.put(
			"tertiaryHeadId", DocFile::getTertiaryHeadId);
		attributeSetterBiConsumers.put(
			"tertiaryHeadId",
			(BiConsumer<DocFile, Long>)DocFile::setTertiaryHeadId);
		attributeGetterFunctions.put("fileCodeId", DocFile::getFileCodeId);
		attributeSetterBiConsumers.put(
			"fileCodeId", (BiConsumer<DocFile, Long>)DocFile::setFileCodeId);
		attributeGetterFunctions.put("subject", DocFile::getSubject);
		attributeSetterBiConsumers.put(
			"subject", (BiConsumer<DocFile, String>)DocFile::setSubject);
		attributeGetterFunctions.put("fileNumber", DocFile::getFileNumber);
		attributeSetterBiConsumers.put(
			"fileNumber", (BiConsumer<DocFile, String>)DocFile::setFileNumber);
		attributeGetterFunctions.put("categoryId", DocFile::getCategoryId);
		attributeSetterBiConsumers.put(
			"categoryId", (BiConsumer<DocFile, Long>)DocFile::setCategoryId);
		attributeGetterFunctions.put(
			"subCategoryId", DocFile::getSubCategoryId);
		attributeSetterBiConsumers.put(
			"subCategoryId",
			(BiConsumer<DocFile, Long>)DocFile::setSubCategoryId);
		attributeGetterFunctions.put("remarks", DocFile::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks", (BiConsumer<DocFile, String>)DocFile::setRemarks);
		attributeGetterFunctions.put("reference", DocFile::getReference);
		attributeSetterBiConsumers.put(
			"reference", (BiConsumer<DocFile, String>)DocFile::setReference);
		attributeGetterFunctions.put("year", DocFile::getYear);
		attributeSetterBiConsumers.put(
			"year", (BiConsumer<DocFile, Long>)DocFile::setYear);
		attributeGetterFunctions.put("userPostId", DocFile::getUserPostId);
		attributeSetterBiConsumers.put(
			"userPostId", (BiConsumer<DocFile, Long>)DocFile::setUserPostId);
		attributeGetterFunctions.put(
			"currentlyWith", DocFile::getCurrentlyWith);
		attributeSetterBiConsumers.put(
			"currentlyWith",
			(BiConsumer<DocFile, Long>)DocFile::setCurrentlyWith);
		attributeGetterFunctions.put("currentState", DocFile::getCurrentState);
		attributeSetterBiConsumers.put(
			"currentState",
			(BiConsumer<DocFile, Integer>)DocFile::setCurrentState);
		attributeGetterFunctions.put(
			"dealingHeadSectionId", DocFile::getDealingHeadSectionId);
		attributeSetterBiConsumers.put(
			"dealingHeadSectionId",
			(BiConsumer<DocFile, Long>)DocFile::setDealingHeadSectionId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getDocFileId() {
		return _docFileId;
	}

	@Override
	public void setDocFileId(long docFileId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_docFileId = docFileId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDocFileId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("docFileId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getNature() {
		if (_nature == null) {
			return "";
		}
		else {
			return _nature;
		}
	}

	@Override
	public void setNature(String nature) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nature = nature;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNature() {
		return getColumnOriginalValue("nature");
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	@JSON
	@Override
	public long getBasicHeadId() {
		return _basicHeadId;
	}

	@Override
	public void setBasicHeadId(long basicHeadId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_basicHeadId = basicHeadId;
	}

	@JSON
	@Override
	public long getPrimaryHeadId() {
		return _primaryHeadId;
	}

	@Override
	public void setPrimaryHeadId(long primaryHeadId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_primaryHeadId = primaryHeadId;
	}

	@JSON
	@Override
	public long getSecondaryHeadId() {
		return _secondaryHeadId;
	}

	@Override
	public void setSecondaryHeadId(long secondaryHeadId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secondaryHeadId = secondaryHeadId;
	}

	@JSON
	@Override
	public long getTertiaryHeadId() {
		return _tertiaryHeadId;
	}

	@Override
	public void setTertiaryHeadId(long tertiaryHeadId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tertiaryHeadId = tertiaryHeadId;
	}

	@JSON
	@Override
	public long getFileCodeId() {
		return _fileCodeId;
	}

	@Override
	public void setFileCodeId(long fileCodeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileCodeId = fileCodeId;
	}

	@JSON
	@Override
	public String getSubject() {
		if (_subject == null) {
			return "";
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subject = subject;
	}

	@JSON
	@Override
	public String getFileNumber() {
		if (_fileNumber == null) {
			return "";
		}
		else {
			return _fileNumber;
		}
	}

	@Override
	public void setFileNumber(String fileNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileNumber = fileNumber;
	}

	@JSON
	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_categoryId = categoryId;
	}

	@JSON
	@Override
	public long getSubCategoryId() {
		return _subCategoryId;
	}

	@Override
	public void setSubCategoryId(long subCategoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subCategoryId = subCategoryId;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public String getReference() {
		if (_reference == null) {
			return "";
		}
		else {
			return _reference;
		}
	}

	@Override
	public void setReference(String reference) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reference = reference;
	}

	@JSON
	@Override
	public long getYear() {
		return _year;
	}

	@Override
	public void setYear(long year) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_year = year;
	}

	@JSON
	@Override
	public long getUserPostId() {
		return _userPostId;
	}

	@Override
	public void setUserPostId(long userPostId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userPostId = userPostId;
	}

	@JSON
	@Override
	public long getCurrentlyWith() {
		return _currentlyWith;
	}

	@Override
	public void setCurrentlyWith(long currentlyWith) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_currentlyWith = currentlyWith;
	}

	@JSON
	@Override
	public int getCurrentState() {
		return _currentState;
	}

	@Override
	public void setCurrentState(int currentState) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_currentState = currentState;
	}

	@JSON
	@Override
	public long getDealingHeadSectionId() {
		return _dealingHeadSectionId;
	}

	@Override
	public void setDealingHeadSectionId(long dealingHeadSectionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dealingHeadSectionId = dealingHeadSectionId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(DocFile.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DocFile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DocFile toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DocFile>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DocFileImpl docFileImpl = new DocFileImpl();

		docFileImpl.setUuid(getUuid());
		docFileImpl.setDocFileId(getDocFileId());
		docFileImpl.setGroupId(getGroupId());
		docFileImpl.setCompanyId(getCompanyId());
		docFileImpl.setUserId(getUserId());
		docFileImpl.setUserName(getUserName());
		docFileImpl.setCreateDate(getCreateDate());
		docFileImpl.setModifiedDate(getModifiedDate());
		docFileImpl.setNature(getNature());
		docFileImpl.setType(getType());
		docFileImpl.setBasicHeadId(getBasicHeadId());
		docFileImpl.setPrimaryHeadId(getPrimaryHeadId());
		docFileImpl.setSecondaryHeadId(getSecondaryHeadId());
		docFileImpl.setTertiaryHeadId(getTertiaryHeadId());
		docFileImpl.setFileCodeId(getFileCodeId());
		docFileImpl.setSubject(getSubject());
		docFileImpl.setFileNumber(getFileNumber());
		docFileImpl.setCategoryId(getCategoryId());
		docFileImpl.setSubCategoryId(getSubCategoryId());
		docFileImpl.setRemarks(getRemarks());
		docFileImpl.setReference(getReference());
		docFileImpl.setYear(getYear());
		docFileImpl.setUserPostId(getUserPostId());
		docFileImpl.setCurrentlyWith(getCurrentlyWith());
		docFileImpl.setCurrentState(getCurrentState());
		docFileImpl.setDealingHeadSectionId(getDealingHeadSectionId());

		docFileImpl.resetOriginalValues();

		return docFileImpl;
	}

	@Override
	public DocFile cloneWithOriginalValues() {
		DocFileImpl docFileImpl = new DocFileImpl();

		docFileImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		docFileImpl.setDocFileId(
			this.<Long>getColumnOriginalValue("docFileId"));
		docFileImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		docFileImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		docFileImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		docFileImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		docFileImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		docFileImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		docFileImpl.setNature(this.<String>getColumnOriginalValue("nature"));
		docFileImpl.setType(this.<String>getColumnOriginalValue("type_"));
		docFileImpl.setBasicHeadId(
			this.<Long>getColumnOriginalValue("basicHeadId"));
		docFileImpl.setPrimaryHeadId(
			this.<Long>getColumnOriginalValue("primaryHeadId"));
		docFileImpl.setSecondaryHeadId(
			this.<Long>getColumnOriginalValue("secondaryHeadId"));
		docFileImpl.setTertiaryHeadId(
			this.<Long>getColumnOriginalValue("tertiaryHeadId"));
		docFileImpl.setFileCodeId(
			this.<Long>getColumnOriginalValue("fileCodeId"));
		docFileImpl.setSubject(this.<String>getColumnOriginalValue("subject"));
		docFileImpl.setFileNumber(
			this.<String>getColumnOriginalValue("fileNumber"));
		docFileImpl.setCategoryId(
			this.<Long>getColumnOriginalValue("categoryId"));
		docFileImpl.setSubCategoryId(
			this.<Long>getColumnOriginalValue("subCategoryId"));
		docFileImpl.setRemarks(this.<String>getColumnOriginalValue("remarks"));
		docFileImpl.setReference(
			this.<String>getColumnOriginalValue("reference"));
		docFileImpl.setYear(this.<Long>getColumnOriginalValue("year"));
		docFileImpl.setUserPostId(
			this.<Long>getColumnOriginalValue("userPostId"));
		docFileImpl.setCurrentlyWith(
			this.<Long>getColumnOriginalValue("currentlyWith"));
		docFileImpl.setCurrentState(
			this.<Integer>getColumnOriginalValue("currentState"));
		docFileImpl.setDealingHeadSectionId(
			this.<Long>getColumnOriginalValue("dealingHeadSectionId"));

		return docFileImpl;
	}

	@Override
	public int compareTo(DocFile docFile) {
		int value = 0;

		if (getDocFileId() < docFile.getDocFileId()) {
			value = -1;
		}
		else if (getDocFileId() > docFile.getDocFileId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DocFile)) {
			return false;
		}

		DocFile docFile = (DocFile)object;

		long primaryKey = docFile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DocFile> toCacheModel() {
		DocFileCacheModel docFileCacheModel = new DocFileCacheModel();

		docFileCacheModel.uuid = getUuid();

		String uuid = docFileCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			docFileCacheModel.uuid = null;
		}

		docFileCacheModel.docFileId = getDocFileId();

		docFileCacheModel.groupId = getGroupId();

		docFileCacheModel.companyId = getCompanyId();

		docFileCacheModel.userId = getUserId();

		docFileCacheModel.userName = getUserName();

		String userName = docFileCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			docFileCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			docFileCacheModel.createDate = createDate.getTime();
		}
		else {
			docFileCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			docFileCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			docFileCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		docFileCacheModel.nature = getNature();

		String nature = docFileCacheModel.nature;

		if ((nature != null) && (nature.length() == 0)) {
			docFileCacheModel.nature = null;
		}

		docFileCacheModel.type = getType();

		String type = docFileCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			docFileCacheModel.type = null;
		}

		docFileCacheModel.basicHeadId = getBasicHeadId();

		docFileCacheModel.primaryHeadId = getPrimaryHeadId();

		docFileCacheModel.secondaryHeadId = getSecondaryHeadId();

		docFileCacheModel.tertiaryHeadId = getTertiaryHeadId();

		docFileCacheModel.fileCodeId = getFileCodeId();

		docFileCacheModel.subject = getSubject();

		String subject = docFileCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			docFileCacheModel.subject = null;
		}

		docFileCacheModel.fileNumber = getFileNumber();

		String fileNumber = docFileCacheModel.fileNumber;

		if ((fileNumber != null) && (fileNumber.length() == 0)) {
			docFileCacheModel.fileNumber = null;
		}

		docFileCacheModel.categoryId = getCategoryId();

		docFileCacheModel.subCategoryId = getSubCategoryId();

		docFileCacheModel.remarks = getRemarks();

		String remarks = docFileCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			docFileCacheModel.remarks = null;
		}

		docFileCacheModel.reference = getReference();

		String reference = docFileCacheModel.reference;

		if ((reference != null) && (reference.length() == 0)) {
			docFileCacheModel.reference = null;
		}

		docFileCacheModel.year = getYear();

		docFileCacheModel.userPostId = getUserPostId();

		docFileCacheModel.currentlyWith = getCurrentlyWith();

		docFileCacheModel.currentState = getCurrentState();

		docFileCacheModel.dealingHeadSectionId = getDealingHeadSectionId();

		return docFileCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DocFile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DocFile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DocFile, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DocFile)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DocFile, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DocFile, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DocFile, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DocFile)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DocFile>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DocFile.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _docFileId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _nature;
	private String _type;
	private long _basicHeadId;
	private long _primaryHeadId;
	private long _secondaryHeadId;
	private long _tertiaryHeadId;
	private long _fileCodeId;
	private String _subject;
	private String _fileNumber;
	private long _categoryId;
	private long _subCategoryId;
	private String _remarks;
	private String _reference;
	private long _year;
	private long _userPostId;
	private long _currentlyWith;
	private int _currentState;
	private long _dealingHeadSectionId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DocFile, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DocFile)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("docFileId", _docFileId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("nature", _nature);
		_columnOriginalValues.put("type_", _type);
		_columnOriginalValues.put("basicHeadId", _basicHeadId);
		_columnOriginalValues.put("primaryHeadId", _primaryHeadId);
		_columnOriginalValues.put("secondaryHeadId", _secondaryHeadId);
		_columnOriginalValues.put("tertiaryHeadId", _tertiaryHeadId);
		_columnOriginalValues.put("fileCodeId", _fileCodeId);
		_columnOriginalValues.put("subject", _subject);
		_columnOriginalValues.put("fileNumber", _fileNumber);
		_columnOriginalValues.put("categoryId", _categoryId);
		_columnOriginalValues.put("subCategoryId", _subCategoryId);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put("reference", _reference);
		_columnOriginalValues.put("year", _year);
		_columnOriginalValues.put("userPostId", _userPostId);
		_columnOriginalValues.put("currentlyWith", _currentlyWith);
		_columnOriginalValues.put("currentState", _currentState);
		_columnOriginalValues.put(
			"dealingHeadSectionId", _dealingHeadSectionId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("type_", "type");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("docFileId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("nature", 256L);

		columnBitmasks.put("type_", 512L);

		columnBitmasks.put("basicHeadId", 1024L);

		columnBitmasks.put("primaryHeadId", 2048L);

		columnBitmasks.put("secondaryHeadId", 4096L);

		columnBitmasks.put("tertiaryHeadId", 8192L);

		columnBitmasks.put("fileCodeId", 16384L);

		columnBitmasks.put("subject", 32768L);

		columnBitmasks.put("fileNumber", 65536L);

		columnBitmasks.put("categoryId", 131072L);

		columnBitmasks.put("subCategoryId", 262144L);

		columnBitmasks.put("remarks", 524288L);

		columnBitmasks.put("reference", 1048576L);

		columnBitmasks.put("year", 2097152L);

		columnBitmasks.put("userPostId", 4194304L);

		columnBitmasks.put("currentlyWith", 8388608L);

		columnBitmasks.put("currentState", 16777216L);

		columnBitmasks.put("dealingHeadSectionId", 33554432L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DocFile _escapedModel;

}